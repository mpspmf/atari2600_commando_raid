import pygame
import pygame.gfxdraw
import math
from random import randint

#colours
BROWN = (81, 52, 10)
DARK_BLUE = (89, 97, 219)
DARK_ORANGE = (204, 154, 71)
GREEN = (12, 78, 9)
GREY = (82, 82, 82)
LIGHT_BLUE = (104, 136, 204)
LIGHT_ORANGE = (224, 176, 90)
PURPLE = (131, 96, 217)
RED = (220, 86, 95) 
WHITE = (255, 255, 255)

#MESURES
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
MOUNT_WIDTH = 550
VALLEY_WIDTH = 40


#shots
pos_inicial = (400, 470)
angle = -90
tiros = []
n = 0
timer = 0

#casas-estado e coordenadas
#estado de cada casa varia entre 0 e 2
houses = [(0, (90, 415)),(1, (200, 415)),(2, (560, 415)),(0, (670, 415))]

HOUSE_SIDE = 40
WINDOW_WIDTH = 7
HOUSE_DOOR_WIDTH = 6
HOUSE_DOOR_HEIGHT = 15


#helicopter and troops

heli_draw = True
heli_draw1 = True

heli = pygame.image.load('desenho12.png')
heli1 = pygame.image.load('desenho13.png')
helicopter = []

level_list = [[1, 20], [2, 30], [3, 36]]
level = 0
ntroops = 0
counter = 0
xpos1 = -50
xpos2 = 800
lancar1 = [0 for _ in range(4)]
lancar2 = [0 for _ in range(4)]

ypos1 = 60
change_pos = False

#paraquedista
draw_list1=[]
draw_list2=[]
jumper_y = 60
drop1 = 0



pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
clock = pygame.time.Clock()
running = True



def overlaps(x1, y1, w1, h1, x2, y2, w2, h2):
    return not (x1+w1 < x2 or x1 > x2+w2 or y1+h1 < y2 or y1 > y2+h2)

while running == True:
    dt = clock.tick(120)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
    #céu
    pygame.draw.rect(screen, LIGHT_BLUE, (0, 0, 800, 155))
    pygame.draw.rect(screen, DARK_BLUE, (0, 155, 800, 100))
    pygame.draw.rect(screen, PURPLE, (0, 255, 800, 85))
    pygame.draw.rect(screen, RED, (0, 340, 800, 100))
    pygame.draw.rect(screen, DARK_ORANGE, (0, 400, 800, 300))
    pygame.draw.rect(screen, LIGHT_ORANGE, (0, 450, 800, 500))


    #canhão
    pygame.draw.circle(screen, GREY, (SCREEN_WIDTH//2, 490), 20)
    pygame.draw.circle(screen, (224, 176, 90), (SCREEN_WIDTH//2, 492), 5)
    
    #montanhas
    screen.set_clip(0, 455, SCREEN_WIDTH, 600-455)
    pygame.draw.ellipse(screen, BROWN, (SCREEN_WIDTH//2+VALLEY_WIDTH-MOUNT_WIDTH, 450, MOUNT_WIDTH, 200))
    pygame.draw.ellipse(screen, BROWN, (SCREEN_WIDTH//2-VALLEY_WIDTH, 450, MOUNT_WIDTH, 200))
    pygame.draw.rect(screen, BROWN, (0, SCREEN_HEIGHT-50, SCREEN_WIDTH, 50))
    screen.set_clip(None)
     
    #casas
    for i in houses:
        if i[0] == 0:
            pygame.draw.rect(screen, GREEN, (i[1][0], i[1][1], HOUSE_SIDE, HOUSE_SIDE))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH+2, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, GREY, (i[1][0]+HOUSE_SIDE/2-HOUSE_DOOR_WIDTH/2, i[1][1]+HOUSE_SIDE-HOUSE_DOOR_HEIGHT, HOUSE_DOOR_WIDTH, HOUSE_DOOR_HEIGHT))
            pygame.gfxdraw.filled_polygon(screen, ((i[1][0], i[1][1]),(i[1][0]+HOUSE_SIDE//2, i[1][1]-HOUSE_SIDE//4),(i[1][0]+HOUSE_SIDE-1, i[1][1])), GREEN)
        elif i[0] == 1:
            pygame.draw.rect(screen, GREEN, (i[1][0], i[1][1], HOUSE_SIDE, HOUSE_SIDE))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH+2, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, GREY, (i[1][0]+HOUSE_SIDE/2-HOUSE_DOOR_WIDTH/2, i[1][1]+HOUSE_SIDE-HOUSE_DOOR_HEIGHT, HOUSE_DOOR_WIDTH, HOUSE_DOOR_HEIGHT))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+1, i[1][1]+3, 8, 14))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+25, i[1][1]+20, 8, 14))
            pygame.gfxdraw.filled_polygon(screen, ((i[1][0], i[1][1]),(i[1][0]+HOUSE_SIDE//2, i[1][1]-HOUSE_SIDE//4),(i[1][0]+HOUSE_SIDE/2+10, i[1][1]-HOUSE_SIDE/6), (i[1][0]+HOUSE_SIDE/2+10, i[1][1])), GREEN)
        elif i[0] == 2:
            pygame.draw.rect(screen, GREEN, (i[1][0], i[1][1], HOUSE_SIDE, HOUSE_SIDE))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH, i[1][1]+WINDOW_WIDTH, WINDOW_WIDTH, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+WINDOW_WIDTH, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, WHITE, (i[1][0]+HOUSE_SIDE-2*WINDOW_WIDTH+2, i[1][1]+HOUSE_SIDE-2*WINDOW_WIDTH, WINDOW_WIDTH-2, WINDOW_WIDTH))
            pygame.draw.rect(screen, GREY, (i[1][0]+HOUSE_SIDE/2-HOUSE_DOOR_WIDTH/2, i[1][1]+HOUSE_SIDE-HOUSE_DOOR_HEIGHT, HOUSE_DOOR_WIDTH, HOUSE_DOOR_HEIGHT))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+1, i[1][1]+3, 8, 14))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+25, i[1][1]+20, 8, 14))
            pygame.gfxdraw.filled_polygon(screen, ((i[1][0], i[1][1]),(i[1][0]+HOUSE_SIDE//2, i[1][1]-HOUSE_SIDE//4),(i[1][0]+HOUSE_SIDE/2+10, i[1][1]-HOUSE_SIDE/6), (i[1][0]+HOUSE_SIDE/2+10, i[1][1])), GREEN)
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+15, i[1][1] -10, 3, 10))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+10, i[1][1]+20, 7, 9))
            pygame.draw.rect(screen, DARK_ORANGE, (i[1][0]+25, i[1][1]+5, 9, 4))
            
            
    
    #mover o canhão
    
    keys = pygame.key.get_pressed()
    
    if keys[pygame.K_LEFT] and angle >= -150:
        angle += -0.3 * dt
    if keys[pygame.K_RIGHT] and angle <= -30:
        angle += 0.3 * dt
    
    pos_final = (400 + 20 * math.cos(angle * math.pi/180),470 + 20 * math.sin(angle * math.pi/180))
    pygame.draw.line(screen, GREY, pos_inicial, pos_final, 5)
    
    #tiros
    if timer>0:
        timer = timer - 0.015
    if keys[pygame.K_SPACE] and timer <= 0:
        timer = 0.5
        tiros.append([list(pos_final), angle])
         
            
    for i in tiros:
        if 0 < i[0][0] < 800 and 0 < i[0][1] < 600:
            i[0] = [i[0][0]+math.cos(i[1] * math.pi/180)*dt, i[0][1]+math.sin(i[1] * math.pi/180)*dt]
            
            pos_final_tiro = (i[0][0] + 4 * math.cos(i[1] * math.pi/180),i[0][1]+ 4 * math.sin(i[1] * math.pi/180))
            pygame.draw.line(screen, GREY, (i[0][0], i[0][1]), pos_final_tiro, 5)
        else:
            tiros.remove(i)
            
            
    #helicopter
         
    if counter > 0:
        counter = round(counter - 0.1, 1)
        draw_list1.clear()
        draw_list2.clear()
        lancar1 = [0 for _ in range(4)]
        lancar2 = [0 for _ in range(4)]
    
    else:
        if ntroops == 0:
            if level <= 3:
                level += 1
            counter = 30
            ntroops = level_list[level-1][1]
            
        else:
            if xpos1 < 800:  # criar nave1
                xpos1 = xpos1 + 0.2*dt
                #pygame.draw.rect(screen, GREY, ( xpos1, ypos1, 30, 20))
                if heli_draw == True:
                    screen.blit(heli,(xpos1,ypos1))
            else:
                heli_draw = True
                lancar1 = [randint(0, 1) for _ in range(4)]
                xpos1 = -50
                
                if (xpos1 + 150 >= xpos2):
                    ypos1 = 10
                else:
                    ypos1 = 60
                
            if xpos2 > -30:  # criar nave2
                xpos2 = xpos2 - 0.2*dt
                #pygame.draw.rect(screen, GREY, ( xpos2, 60, 30, 20))
                if heli_draw1 == True:
                    screen.blit(heli1,(xpos2, 60))
            else:
                heli_draw1 = True
                lancar2 = [randint(0, 1) for _ in range(4)]
                xpos2 = 800
                
         
            if (xpos1 + 150 >= xpos2 and xpos1 - 140 <= xpos2) or (xpos1 + 150 - 800 >= xpos2 and xpos1 - 140 -800 <= xpos2) :
                change_pos = True
            else:
                change_pos = False
            
            if change_pos == True:
                if ypos1 > 10:
                    ypos1 = ypos1 - 1
            else:
                if ypos1 != 60:
                    xpos1 = xpos1 -level
                    ypos1 = ypos1 + 1
                    
                              
    #paraquedista 
    for i in range(4):
        if xpos1 > houses[i][1][0] and lancar1[i] == 1:
            draw_list1.append([houses[i][1][0], 60])
            lancar1[i] = 0
            
    for i in range(3, -1, -1):
        if xpos2 < houses[i][1][0]+40 and lancar2[i] == 1:
            draw_list2.append([houses[i][1][0]+20, 60])
            lancar2[i] = 0
            
    a = draw_list1.copy()  
    b = draw_list2.copy()      
    for i in a:
          if i[1] > 415:
              draw_list1.remove(i)

    for i in b:
          if i[1] > 415:
              draw_list2.remove(i)
    
    for i in draw_list1:
        i[1] += 1
        pygame.draw.rect(screen, GREY, (i[0], i[1], 20, 40))
        
    for i in draw_list2:
        i[1] += 1
        pygame.draw.rect(screen, GREY, (i[0], i[1], 20, 40))
            
    #colisão tiro heli
    
    for i in tiros:
        if overlaps(xpos1, ypos1,56, 27, i[0][0], i[0][1], 4, 4):
            heli_draw = False
            tiros.remove(i)
        
    for i in tiros:
        if overlaps(xpos2, 60 ,56, 27, i[0][0], i[0][1], 4, 4):
            heli_draw1 = False
            tiros.remove(i)    
     
            
    
    pygame.display.flip()

pygame.quit()
